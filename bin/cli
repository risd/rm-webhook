#!/usr/bin/env node

var debug = require('debug')('rm-wh:cli');
var objectAssign = require( 'object-assign' );

var program = require( 'commander' )
// var usage = fs.readFileSync(__dirname + '/usage.md').toString();
var wh = require('wh').lib;

var rmwh = require( '../index.js' )

var mediaConfiguration = require( '../lib/configuration.js' )()

function extendMediaConfigurationWithProgram () {
  // A subset of keys from `program` are configuration, and not all,
  // so we pull out the ones that we want and store them in `fromCli`
  var fromCli = {}

  if ( program.firebase ) fromCli.firebaseName = program.firebase;
  if ( program.token ) fromCli.firebaseToken = program.token;
  if ( program.server ) fromCli.server = program.server;
  if ( program.branch ) fromCli.branch = program.branch;
  if ( program.http ) fromCli.http = program.http;
  if ( program.embedly ) fromCli.embedly = program.embedly;
  if ( program.generate ) fromCli.generate = program.generate;
  if ( program.imgix_host ) fromCli.imgix_host = program.imgix_host;
  if ( program.imgix_secret ) fromCli.imgix_secret = program.imgix_secret;
  if ( program.npm ) fromCli.npm = program.npm;
  if ( program.node ) fromCli.node = program.node;
  if ( program.grunt ) fromCli.grunt = program.grunt;
  if ( program.email ) fromCli.email = program.email;
  if ( program.cache ) fromCli.cache = program.cache;
  if ( program.types ) fromCli.types = program.types;
  if ( program.skipBuild ) fromCli.skipBuild = program.skipBuild;
  if ( program.gcloud ) fromCli.gcloud = program.gcloud;
  if ( program.staticFolder ) fromCli.staticFolder = program.staticFolder;
  if ( program.staticPrefix ) fromCli.staticPrefix = program.staticPrefix;

  return objectAssign( mediaConfiguration, fromCli )
}

function onExit ( error ) {
  if ( error ) console.log( error.message );
  process.exit();
}

program
  .option( '-f, --firebase [firebasename]', 'Use the specified firebase instead of webhook main, for self hosting mode' )
  .option( '-t, --token [authToken]', 'Use this auth token for firebase instead of prompting for login' )
  .option( '-s, --server [uploadserver]', 'Use this server when uploading files, for self hosting mode' )
  .option( '--branch [branch]', 'Use this git branch instead of the current branch' )
  .option( '--http', 'Use http instead of default https as the server protocol' )
  .option( '-m, --embedly [embedly]', 'Use this embedly key when writing .firebase.conf, for self hosting mode' )
  .option( '-b, --generate [generate]', 'Use this generator URL when creating a new site, for self hosting mode' )
  .option( '-h, --imgix_host [imgixhost]', 'Use this URL for imgix CDN serving, for self hosting mode' )
  .option( '-x, --imgix_secret [imgixsecret]', 'Use this secret to sign imgix URLs, for self hosting mode' )
  .option( '-n, --npm [npmPath]', 'Use this npm executable over the default one (npm)' )
  .option( '-o, --node [nodePath]', 'Use this node executable over the default one (node)' )
  .option( '-g, --grunt [gruntPath]', 'Use this grunt executable over the default one (grunt)' )
  .option( '-e, --email [email]', 'The e-mail address to use when using the --token option' )
  .option( '-c, --cache [cacheDir]', 'Sets the directory to use for npm cache' )
  .option('--types [contentTypes]', 'Clone these content types. If omitted, all content types are cloned.')
  .option('--skipBuild', 'Skips the site build as a step to ensure templates are okay before deploying.')
  .option('--gcloud [gcloud]', 'Path to Google Project JSON file.')
  .option('--staticFolder [staticFolder]', 'Path to local folder to push folder.')
  .option('--staticPrefix [staticPrefix]', 'Prefix to add to the static directory being pushed.')


program.command( 'deploys' )
  .description( 'List all deploy configuration for the current webhook site' )
  .action( function () {

    var configuration = extendMediaConfigurationWithProgram();

    rmwh.deploys( configuration, onExit )

  } )

program.command( 'deploys:set <bucketName>' )
  .description( 'Set a bucket as the deploy destination. Use the --branch flag to override setting the deploy to use the current branch\'s set of templates.' )
  .action( function ( bucketName ) {
    if ( typeof bucketName !== 'string' ) console.log( 'Set requires a bucket name be passed in.' )

    var configuration = extendMediaConfigurationWithProgram();

    rmwh.deploys( Object.assign( configuration, { bucketSet: bucketName } ), onExit )

  } )

program.command( 'deploys:remove <bucketName>' )
  .description( 'Remove a bucket as a deploy destination.' )
  .action( function ( bucketName ) {
    if ( typeof bucketName !== 'string' ) console.log( 'Set requires a bucket name be passed in.' )

    var configuration = extendMediaConfigurationWithProgram();

    rmwh.deploys( Object.assign( configuration, { bucketRemove: bucketName } ), onExit )

  } )

program.command( 'deploy' )
  .description( 'Push a webhook directory to server' )
  .action( function () {

    var configuration = extendMediaConfigurationWithProgram();

    rmwh.push( configuration, onExit )

  } )

program.command( 'create <siteName>' )
  .description( 'Create a new webhook site.' )
  .action( function ( siteName ) {

    var configuration = extendMediaConfigurationWithProgram();

    rmwh.create( Object.assign( configuration, { siteName: siteName } ), onExit )

  } )

program.command( 'delete <siteName>' )
  .description( 'Delete a site from webhook' )
  .action( function ( siteName ) {

    var configuration = extendMediaConfigurationWithProgram();

    rmwh.delete( Object.assign( configuration, { siteName: siteName } ), onExit )

  }, onExit )

program.command( 'init <siteName>' )
  .description( 'Initializes a site with configuration files' )
  .action( function ( siteName ) {

    var configuration = extendMediaConfigurationWithProgram();

    rmwh.init( Object.assign( configuration, { siteName: siteName } ), onExit )

  } )

program.command( 'recreate <siteName>' )
  .description( 'Recreates a site using the last version of the site uploaded to the webhook servers.' )
  .action( function ( siteName ) {

    var configuration = extendMediaConfigurationWithProgram();

    rmwh.recreate( Object.assign( configuration, { siteName: siteName } ), onExit )
    
  } );

program.command( 'list-sites' )
  .description( 'Lists all the sites that the user is an owner/user on' )
  .action( function () {

    var configuration = extendMediaConfigurationWithProgram();

    rmwh.listSites( configuration, onExit )
    
  } )

program.command('preset-build')
  .description('Generates a .preset-data.json file from a webhook directory')
  .action(function () {

    var configuration = extendMediaConfigurationWithProgram();

    rmwh.presetBuild( Object.assign( configuration, { all: false } ), onExit )

  } )

program.command('preset-build-all')
  .description('Generates a .preset-data.json file from a webhook directory which includes data')
  .action(function () {

    var configuration = extendMediaConfigurationWithProgram();

    rmwh.presetBuild( Object.assign( configuration, { all: true } ), onExit )

  } )

program.command( 'backup <toFile>' )
  .description( 'Generates a backup JSON file at the <toFile> from a webhook directory which includes data' )
  .action( function ( toFile ) {

    var configuration = extendMediaConfigurationWithProgram();

    var backupOptions = {
      all: true,
      toFile: toFile
    }

    rmwh.presetBuild( Object.assign( configuration, backupOptions ), onExit )

  } )

program.command( 'restore <fromFile>' )
  .description('Restores database to state captured in backup file, such as one generated from `wh backup`')
  .action(function (fromFile) {

    var configuration = extendMediaConfigurationWithProgram();

    var restoreOptions = {
      all: true,
      fromFile: fromFile
    }

    rmwh.restore( Object.assign( configuration, restoreOptions ), onExit )

  } )

program.command('update')
  .description('Updates a webhook site with the latest generate code')
  .action(function () {

    var configuration = extendMediaConfigurationWithProgram();

    rmwh.update( configuration, onExit )

  });

program.command('push')
  .description('Push webhook directory to server')
  .action(function () {

    var configuration = extendMediaConfigurationWithProgram();

    rmwh.push( configuration, onExit )

  });

program.command('reset-keys')
  .description('Resets user passwords and site keys.')
  .action(function () {

    var configuration = extendMediaConfigurationWithProgram();

    rmwh.resetKeys( configuration, onExit )

  })

program.command('reset-keys:sites')
  .description('Resets site keys.')
  .action(function () {

    var configuration = extendMediaConfigurationWithProgram();

    rmwh.resetKeys( Object.assign( configuration, { resetUserPasswords: false } ), onExit )

  })

 program.command('reset-keys:users')
  .description('Resets site keys.')
  .action(function () {

    var configuration = extendMediaConfigurationWithProgram();

    rmwh.resetKeys( Object.assign( configuration, { resetSiteKeys: false } ), onExit )

  })

program.command('serve [port]')
  .description('Serves a webhook site locally')
  .action(function (port) {

    var configuration = extendMediaConfigurationWithProgram();

    rmwh.serve( Object.assign( configuration, { port: port } ), onExit )

  });

program.command('clone-content-under <namespace>')
  .description('Clones content type and current data under a new namespace.')
  .action(function (namespace) {
    
    var contentTypes = ((typeof program.types === 'string')
      ? program.types.split(',')
      : [] )

    var cloneOptions = {
      namespace: namespace,
      contentTypes: contentTypes
    }

    var configuration = extendMediaConfigurationWithProgram();

    rmwh.cloneContentUnder( Object.assign( configuration, cloneOptions ), onExit )

  });

program.command('deploy-static <siteName>')
    .description('Push a static snapshot of the current site, or --staticFolder.')
    .action(function ( siteName ) {

      var configuration = extendMediaConfigurationWithProgram();

      rmwh.deployStatic( Object.assign( configuration, { siteName: siteName } ), onExit )

    })

program.command('echo-options')
  .description('Echos options passed into this command, used for debugging')
  .action(function() {
    
    var configuration = extendMediaConfigurationWithProgram();

    console.log( JSON.stringify( configuration, null, 2 ) )

  });

program.parse( process.argv )

if (!program.args.length) program.help();


