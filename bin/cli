#!/usr/bin/env node

var debug = require('debug')('rm-wh:cli');

var program = require( 'commander' )
// var usage = fs.readFileSync(__dirname + '/usage.md').toString();
var optionallyAddDomain = require( '../lib/optionally-add-domain.js' )
var wh = require('@risd/wh').lib;

const cliCmd = 'rm-wh'

function extendMediaConfigurationWithProgram ( positionalArguments ) {
  if ( ! positionalArguments ) positionalArguments = {}
  // A subset of keys from `program` are configuration, and not all,
  // so we pull out the ones that we want and store them in `fromCli`
  var fromCli = {}

  if ( program.firebase ) fromCli.firebaseName = program.firebase;
  if ( program.firebaseAPIKey ) fromCli.firebaseAPIKey = program.firebaseAPIKey;
  if ( program.firebaseToken ) fromCli.firebaseToken = program.firebaseToken;
  if ( program.server ) fromCli.server = program.server;
  if ( program.branch ) fromCli.branch = program.branch;
  if ( program.http ) fromCli.http = program.http;
  if ( program.embedly ) fromCli.embedly = program.embedly;
  if ( program.generate ) fromCli.generate = program.generate;
  if ( program.imgix_host ) fromCli.imgix_host = program.imgix_host;
  if ( program.imgix_secret ) fromCli.imgix_secret = program.imgix_secret;
  if ( program.npm ) fromCli.npm = program.npm;
  if ( program.node ) fromCli.node = program.node;
  if ( program.grunt ) fromCli.grunt = program.grunt;
  if ( program.email ) fromCli.email = program.email;
  if ( program.cache ) fromCli.cache = program.cache;
  if ( program.debug ) fromCli.debug = program.debug;
  if ( program.skipBuild ) fromCli.skipBuild = program.skipBuild;
  if ( program.gcloud ) fromCli.gcloud = program.gcloud;
  if ( program.staticFolder ) fromCli.staticFolder = program.staticFolder;
  if ( program.staticPrefix ) fromCli.staticPrefix = program.staticPrefix;
  if ( program.force ) fromCli.force = program.force;

  var configurationFilePath = program.configuration
    ? program.configuration
    : false;
  var mediaConfiguration = require( '../lib/configuration.js' )( configurationFilePath )

  if ( positionalArguments.siteName && mediaConfiguration.domain )
    fromCli.siteName = optionallyAddDomain( mediaConfiguration.domain, positionalArguments.siteName )

  return Object.assign( mediaConfiguration, fromCli )
}

program
  .option( '-f, --firebase [firebasename]', 'Use the specified firebase instead of webhook main, for self hosting mode' )
  .option( '-t, --firebaseToken [firebaseToken]', 'Use this auth token for firebase instead of prompting for login' )
  .option( '-s, --server [uploadserver]', 'Use this server when uploading files, for self hosting mode' )
  .option( '--branch [branch]', 'Use this git branch instead of the current branch' )
  .option( '--http', 'Use http instead of default https as the server protocol' )
  .option( '-m, --embedly [embedly]', 'Use this embedly key when writing .firebase.conf, for self hosting mode' )
  .option( '-b, --generate [generate]', 'Use this generator URL when creating a new site, for self hosting mode' )
  .option( '-h, --imgix_host [imgixhost]', 'Use this URL for imgix CDN serving, for self hosting mode' )
  .option( '-x, --imgix_secret [imgixsecret]', 'Use this secret to sign imgix URLs, for self hosting mode' )
  .option( '-n, --npm [npmPath]', 'Use this npm executable over the default one (npm)' )
  .option( '-o, --node [nodePath]', 'Use this node executable over the default one (node)' )
  .option( '-g, --grunt [gruntPath]', 'Use this grunt executable over the default one (grunt)' )
  .option( '-e, --email [email]', 'The e-mail address to use when using the --token option' )
  .option( '-c, --cache [cacheDir]', 'Sets the directory to use for npm cache' )
  .option('-d, --debug', 'Set to debug mode. Logs out progress through processes.')
  .option('--types [contentTypes]', 'Clone these content types. If omitted, all content types are cloned.')
  .option('--skipBuild', 'Skips the site build as a step to ensure templates are okay before deploying.')
  .option('--gcloud [gcloud]', 'Path to Google Project JSON file.')
  .option('--staticFolder [staticFolder]', 'Path to local folder to push folder.')
  .option('--staticPrefix [staticPrefix]', 'Prefix to add to the static directory being pushed.')
  .option('--configuration [configurationFilePath]', 'Path to local json file to be used as basis for CLI configuration.')
  .option('--firebaseAPIKey [firebaseAPIKey]', 'The Firebase web API key to use.')
  .option('--platformName [platformName]', 'The name of the webhook publishing platform instance.')
  .option('--force [force]', 'Skip any interactive prompts to confirm command execution.')


program.command( 'deploys' )
  .description( 'List all deploy configuration for the current webhook site' )
  .action(async function () {

    var configuration = extendMediaConfigurationWithProgram();

    try {
      const { deploys } = await wh.deploys(configuration)
      wh.deploys.cliLogSuccess({ deploys })
    }
    catch (error) {
      wh.deploys.cliLogError(errror)
    }

  } )

program.command( 'deploys:set <bucketName>' )
  .description( 'Set a bucket as the deploy destination. Use the --branch flag to override setting the deploy to use the current branch\'s set of templates.' )
  .action(async function ( bucketName ) {
    if ( typeof bucketName !== 'string' ) console.log( 'Set requires a bucket name be passed in.' )

    var configuration = extendMediaConfigurationWithProgram();

  try {
    const { deploys } = await wh.deploys( {
      ...configuration,
      {
        bucketSet: bucketName,
      }
    })
    wh.deploys.cliLogSuccess({ deploys })
  }
  catch (error) {
    wh.deploys.cliLogError(errror)
  }

  } )

program.command( 'deploys:remove <bucketName>' )
  .description( 'Remove a bucket as a deploy destination.' )
  .action(async function ( bucketName ) {
    if ( typeof bucketName !== 'string' ) console.log( 'Set requires a bucket name be passed in.' )

    var configuration = extendMediaConfigurationWithProgram();

    try {
    const { deploys } = await wh.deploys( {
      ...configuration,
      bucketRemove: bucketName,
    })
    wh.deploys.cliLogSuccess({ deploys })
  }
  catch (error) {
    wh.deploys.cliLogError(errror)
  }

  } )

program.command( 'github' )
  .description( 'Display the current git user/repo configuration for the site.' )
  .action(async function () {
    var configuration = extendMediaConfigurationWithProgram();

    try {
      const { siteName, github } = wh.github(configuration)  
      wh.github.cliLogSuccessGet({ siteName, github })
    }
    catch (error) {
      wh.github.cliLogError(error)
    }
    
  } )

program.command( 'github:set <userRepo>' )
  .description( 'Set the git user/repo configuration for the current site directory.' )
  .action(async function ( userRepo ) {
    if ( typeof userRepo !== 'string' ) console.log( 'Set requires a user/repo name be passed in. For example: google/leveldb' )
    var configuration = extendMediaConfigurationWithProgram();
    try {
      const { siteName, github } = wh.github({
        ...configuration,
        gitSet: userRepo,
      })  
      wh.github.cliLogSuccessSet({ siteName, github })
    }
    catch (error) {
      wh.github.cliLogError(error)
    }
  } )

program.command( 'github:remove' )
  .description( 'Remove the git user/repo configuration for the current site directory.' )
  .action(async function () {
    var configuration = extendMediaConfigurationWithProgram();


    try {
      const { siteName } = wh.github({
        ...configuration,
        gitRemove: true,
      })  
      wh.github.cliLogSuccessRemove({ siteName })
    }
    catch (error) {
      wh.github.cliLogError(error)
    }
  } )

program.command( 'map-domain <maskDomain> [contentDomain]' )
  .description( 'Configure the maskDomain to pull content from the contentDomain.' )
  .action(async function ( maskDomain, contentDomain ) {

    var configuration = extendMediaConfigurationWithProgram()

    try {
      await wh.mapDomain({
        ...configuration,
        maskDomain,
        contentDomain,
      })
      wh.mapDomain.cliLogSuccess({ maskDomain, contentDomain })
    }
    catch (error) {
      wh.mapDomain.cliLogError(error)
    }
  } )

program.command( 'deploy' )
  .description( 'Push a webhook directory to server' )
  .action(async function () {

    var configuration = extendMediaConfigurationWithProgram();

    try {
      await wh.push(configuration)  
      wh.push.cliLogSuccess()
    }
    catch (error) {
      wh.push.cliLogError(error)
    }
  } )

program.command( 'create <siteName>' )
  .description( 'Create a new webhook site.' )
  .action(async function ( siteName ) {

    var configuration = extendMediaConfigurationWithProgram( { siteName: siteName } );

    try {
      await wh.create( configuration )
      wh.create.cliLogSuccess({ siteName: configuration.siteName })
    }
    catch (error) {
      wh.create.cliLogError(error, { siteName: configuration.siteName })
    }
    

  } )

program.command( 'init <siteName>' )
  .description( 'Initializes a site with configuration files' )
  .action(async function ( siteName ) {

    var configuration = extendMediaConfigurationWithProgram( { siteName: siteName } );

    try {
      await wh.init( configuration )  
      wh.init.cliLogSuccess()
    }
    catch (error) {
      wh.init.cliLogError(error)
    }
  } )

program.command( 'conf <siteName>' )
  .description( 'Initializes a site with configuration files. . Assumes node_modules are already installed.' )
  .action(async function ( siteName ) {

    var configuration = extendMediaConfigurationWithProgram( { siteName: siteName } );

    try {
      await wh.conf( configuration )  
      wh.conf.cliLogSuccess()
    }
    catch (error) {
      wh.conf.cliLogError(error, { platformName: configuration.platformName })
    }

  } )

program.command( 'list-sites' )
  .description( 'Lists all the sites that the user is an owner/user on' )
  .action(async function () {

    var configuration = extendMediaConfigurationWithProgram();

    try {
      const { userSites } = await wh.listSites( configuration )
      wh.listSites.cliLogSuccess({ userSites })
    }
    catch (error) {
      wh.listSites.cliLogError(error)
    }
  } )

program.command('preset-build')
  .description('Generates a .preset-data.json file from a webhook directory')
  .action(async function () {

    var configuration = extendMediaConfigurationWithProgram();

    try {
      const { pathToWrite } = await wh.presetBuild({
        ...configuration
        all: false,
      }) 
      wh.cliLogSuccess({ pathToWrite })
    }
    catch (error) {
      wh.presetBuild.cliLogError(error)
    }

  } )

program.command('preset-build-all')
  .description('Generates a .preset-data.json file from a webhook directory which includes data')
  .action(async function () {

    var configuration = extendMediaConfigurationWithProgram();

    try {
      const { pathToWrite } = await wh.presetBuild({
        ...configuration
        all: true,
      }) 
      wh.cliLogSuccess({ pathToWrite })
    }
    catch (error) {
      wh.presetBuild.cliLogError(error)
    }

  } )

program.command( 'backup <toFile>' )
  .description( 'Generates a backup JSON file at the <toFile> from a webhook directory which includes data' )
  .action(async function ( toFile ) {

    var configuration = extendMediaConfigurationWithProgram()

    try {
      const { pathToWrite } = await wh.presetBuild({
        ...configuration
        all: true,
        toFile: toFile || 'backup.json',
      }) 
      wh.cliLogSuccess({ pathToWrite })
    }
    catch (error) {
      wh.presetBuild.cliLogError(error)
    }

  } )

program.command( 'restore <fromFile>' )
  .description('Restores database to state captured in backup file, such as one generated from `rm-wh backup`')
  .action(async function (fromFile) {

    var configuration = extendMediaConfigurationWithProgram();

    try {
      const { updated } = await wh.restore({
        ...configuration,
        fromFile,
      }) 
      wh.restore.cliLogSuccess({ fromFile, updated })
    }
    catch (error) {
      wh.restore.cliLogError(error, { fromFile })
    }

  } )

program.command('update')
  .description('Updates a webhook site with the latest generate code')
  .action(async function () {

    var configuration = extendMediaConfigurationWithProgram();

    try {
      await wh.update(configuration)
      wh.update.cliLogSuccess({ cliCmd })
    }
    catch (error) {
      wh.update.cliLogError(error)
    }
  });

program.command( 'update-sites [sitesMiniMatch]' )
  .description( 'Update a series of sites for which you are the owner, and have git access to the repository.' )
  .action( function ( sitesMiniMatch ) {
    var configuration = extendMediaConfigurationWithProgram()

    require( '../lib/update-sites' )( Object.assign( configuration, { sitesMiniMatch: sitesMiniMatch, } ), handleUpdates )

    function handleUpdates ( error, results ) {
      if ( ! error &&  results && Array.isArray( results.siteList ) ) {
        var generateVersion = results.generateVersion;
        var siteList = results.siteList;
        var message = `Updated to ${ generateVersion }: \n${ siteListReport( siteList ) }`  
        console.log( message )
      }
      onExit( error )
    }

    function siteListReport ( siteList ) {
      var lines = siteList.map( function ( siteEntry ) { return `- ${ siteEntry.siteName }` } )
      return lines.join( '\n' )
    }
  })

program.command('push')
  .description('Push webhook directory to server')
  .action(async function () {

    var configuration = extendMediaConfigurationWithProgram();

    try {
      await wh.push(configuration)
      wh.push.cliLogSuccess()
    }
    catch (error) {
      wh.push.cliLogError()
    }

  })

program.command('serve [port]')
  .description('Serves a webhook site locally')
  .action(async function (port) {

    var configuration = extendMediaConfigurationWithProgram();

    try {
      await wh.serve({
        ...configuration,
        port,
      })
    } catch (error) {
      wh.serve.cliLogError(error)
    }
  });

program.command('deploy-static [siteName]')
    .description('Push a static snapshot of the current site, or --staticFolder.')
    .action(async function ( siteName ) {

      var configuration = extendMediaConfigurationWithProgram( { siteName } )

      try {
        await wh.deployStatic(configuration)
      }
      catch (error) {
        wh.deployStatic.cliLogError(error)
      }
    })

program.command('push-static [domain]')
  .description('Push a static directory (--staticFolder) to the domain passed in as the first argument, augmented by the current git branch (or --branch value).')
  .action(function (domain) {

    var configuration = extendMediaConfigurationWithProgram();

    try {
      const { directory, siteName, sitePath } = await wh.pushStatic({
        ...configuration,
        baseDomain: domain,
      }) 
      wh.pushStatic.cliLogSuccess({ directory, siteName, sitePath })
    }
    catch (error) {
      wh.pushStatic.cliLogError(error)
    }
    

  })

program.command('echo-options')
  .description('Echos options passed into this command, used for debugging')
  .action(function() {
    
    var configuration = extendMediaConfigurationWithProgram();
    
    console.log( JSON.stringify( configuration, null, 2 ) )

  });

program.parse( process.argv )

if (!program.args.length) program.help();
