#!/usr/bin/env node

var debug = require('debug')('rm-wh:cli');

var program = require( 'commander' )
// var usage = fs.readFileSync(__dirname + '/usage.md').toString();
var wh = require('wh').lib;

getMediaConfiguration( function withConfiguration ( error, mediaConfiguration ) {
	if ( error ) return console.log( error );


	/**
	 * Expects a site name. If there is a `.` in the name, a domain is assumed
	 * otherwise, `mediaConfiguration.domain` is appened as the domain
	 * 
	 * @param  {string} site The name of the site
	 * @return {string} site The name of the site with 
	 */
	function optionallyAddDomain ( site ) {
		if ( typeof site !== 'string' ) return null;

		var optionalDomain = mediaConfiguration.domain;
		
		var containsTLD = function () {
			var indexOfPeriod = site.indexOf( '.' );
			return indexOfPeriod === -1 ? false : true;
		}

		var siteHasTLD = containsTLD( site );
		if ( siteHasTLD === true ) return site;
		else return [ site, optionalDomain ].join( '.' );

	}

	function extendMediaConfigurationWithProgram () {
		// A subset of keys from `program` are configuration, and not all,
		// so we pull out the ones that we want and store them in `fromCli`
		var fromCli = {}
		
		if ( program.firebase ) fromCli.firebase = program.firebase;
		if ( program.token ) fromCli.firebaseToken = program.token;
		if ( program.server ) fromCli.server = program.server;
		if ( program.branch ) fromCli.branch = program.branch;
		if ( program.http ) fromCli.http = program.http;
		if ( program.embedly ) fromCli.embedly = program.embedly;
		if ( program.generate ) fromCli.generate = program.generate;
		if ( program.imgix_host ) fromCli.imgix_host = program.imgix_host;
		if ( program.imgix_secret ) fromCli.imgix_secret = program.imgix_secret;
		if ( program.npm ) fromCli.npm = program.npm;
		if ( program.node ) fromCli.node = program.node;
		if ( program.grunt ) fromCli.grunt = program.grunt;
		if ( program.email ) fromCli.email = program.email;
		if ( program.cache ) fromCli.cache = program.cache;

		return Object.assign( mediaConfiguration, fromCli )
	}

	function onExit ( error ) {
		// if ( error ) console.log( error );
		process.exit();
	}

	program
		.option( '-f, --firebase [firebasename]', 'Use the specified firebase instead of webhook main, for self hosting mode' )
		.option( '-t, --token [authToken]', 'Use this auth token for firebase instead of prompting for login' )
		.option( '-s, --server [uploadserver]', 'Use this server when uploading files, for self hosting mode' )
		.option( '--branch [branch]', 'Use this git branch instead of the current branch' )
		.option( '--http', 'Use http instead of default https as the server protocol' )
		.option( '-m, --embedly [embedly]', 'Use this embedly key when writing .firebase.conf, for self hosting mode' )
		.option( '-b, --generate [generate]', 'Use this generator URL when creating a new site, for self hosting mode' )
		.option( '-h, --imgix_host [imgixhost]', 'Use this URL for imgix CDN serving, for self hosting mode' )
    .option( '-x, --imgix_secret [imgixsecret]', 'Use this secret to sign imgix URLs, for self hosting mode' )
    .option( '-n, --npm [npmPath]', 'Use this npm executable over the default one (npm)' )
    .option( '-o, --node [nodePath]', 'Use this node executable over the default one (node)' )
    .option( '-g, --grunt [gruntPath]', 'Use this grunt executable over the default one (grunt)' )
    .option( '-e, --email [email]', 'The e-mail address to use when using the --token option' )
    .option( '-c, --cache [cacheDir]', 'Sets the directory to use for npm cache' )


	program.command( 'deploys' )
		.description( 'List all deploy configuration for the current webhook site' )
		.action( function () {

			var configuration = extendMediaConfigurationWithProgram();

			wh.deploys( {
				firebaseName: configuration.firebase,
				firebaseToken: configuration.firebaseToken,
			}, onExit )

		} )

	program.command( 'deploys:set <bucketName>' )
		.description( 'Set a bucket as the deploy destination. Use the --branch flag to override setting the deploy to use the current branch\'s set of templates.' )
		.action( function ( bucketName ) {
			if ( typeof bucketName !== 'string' ) console.log( 'Set requires a bucket name be passed in.' )

			var configuration = extendMediaConfigurationWithProgram();

			wh.deploys( {
				firebaseName: configuration.firebase,
				firebaseToken: configuration.firebaseToken,
				branch: configuration.branch,
				bucketSet: bucketName,
			}, onExit )

		} )

	program.command( 'deploys:remove <bucketName>' )
		.description( 'Remove a bucket as a deploy destination.' )
		.action( function ( bucketName ) {
			if ( typeof bucketName !== 'string' ) console.log( 'Set requires a bucket name be passed in.' )

			var configuration = extendMediaConfigurationWithProgram();

			wh.deploys( {
				firebaseName: configuration.firebase,
				firebaseToken: configuration.firebaseToken,
				branch: configuration.branch,
				bucketRemove: bucketName,
			}, onExit )

		} )

	program.command( 'deploy' )
		.description( 'Push a webhook directory to server' )
		.action( function () {

			var configuration = extendMediaConfigurationWithProgram();

			wh.push( {
				server: configuration.server,
				firebaseToken: configuration.firebaseToken,
				http: configuration.http,
			}, onExit )

		} )

	program.command( 'create <siteName>' )
		.description( 'Create a new webhook site.' )
		.action( function ( siteName ) {

			var configuration = extendMediaConfigurationWithProgram();

			wh.create( {
				siteName: optionallyAddDomain( siteName ),
				firebase: configuration.firebase,
				embedly: configuration.embedly,
				server: configuration.server,
				generate: configuration.generate,
				imgix_host: configuration.imgix_host,
				imgix_secret: configuration.imgix_secret,
				firebaseName: configuration.firebase,
				firebaseToken: configuration.firebaseToken,
				npm: configuration.npm,
        node: configuration.node,
        grunt: configuration.grunt,
			}, onExit )
				
		} )

	program.command( 'delete <siteName>' )
		.description( 'Delete a site from webhook' )
		.action( function ( siteName ) {

			var configuration = extendMediaConfigurationWithProgram();

			wh.delete( {
				siteName: optionallyAddDomain( siteName ),
				firebaseName: configuration.firebase,
				firebaseToken: configuration.firebaseToken,
			}, onExit )

		}, onExit )

	program.command( 'init <siteName>' )
		.description( 'Initializes a site with configuration files' )
		.action( function ( siteName ) {

			var configuration = extendMediaConfigurationWithProgram();

			wh.init( {
				siteName: optionallyAddDomain( siteName ),
				firebaseName: configuration.firebase,
				firebaseToken: configuration.firebaseToken,
        embedly: configuration.embedly,
        server: configuration.server,
        generate: configuration.generate,
        imgix_host: configuration.imgix_host,
        imgix_secret: configuration.imgix_secret,
				email: configuration.email,
				npm: configuration.npm,
        node: configuration.node,
        grunt: configuration.grunt,
			}, onExit )

		} )

  program.command( 'recreate <siteName>' )
    .description( 'Recreates a site using the last version of the site uploaded to the webhook servers.' )
    .action( function ( siteName ) {

    	var configuration = extendMediaConfigurationWithProgram();

      if ( program.firebase ) {
        siteName = siteName.replace(/\./g, ',1');
      }
      
      wh.recreate( {
        siteName: optionallyAddDomain( siteName ),
        firebase: configuration.firebase,
        server: configuration.server,
        embedly: configuration.embedly,
        generate: configuration.generate,
        imgix_host: configuration.imgix_host,
        imgix_secret: configuration.imgix_secret,
        npm: configuration.npm,
        node: configuration.node,
        grunt: configuration.grunt,
        token: configuration.token,
        email: configuration.email,
        cache: configuration.cache
      } );

    } );

	program.command( 'list-sites' )
	  .description( 'Lists all the sites that the user is an owner/user on' )
	  .action( function () {

	  	var configuration = extendMediaConfigurationWithProgram();
	    
	    wh.listSites({
	      firebase: configuration.firebase,
	      server: configuration.server,
	      npm: configuration.npm,
	      node: configuration.node,
	      grunt: configuration.grunt,
	      token: configuration.token,
	      email: configuration.email,
	    } )

	  } )

	program.command('preset-build')
    .description('Generates a .preset-data.json file from a webhook directory')
    .action(function () {

    	var configuration = extendMediaConfigurationWithProgram();

      wh.presetBuild(false, {
        firebase: configuration.firebase,
        server: configuration.server,
        npm: configuration.npm,
        node: configuration.node,
        grunt: configuration.grunt,
        token: configuration.token,
        email: configuration.email,
        toFile: null  // use the default
      } )

    } )

  program.command('preset-build-all')
    .description('Generates a .preset-data.json file from a webhook directory which includes data')
    .action(function () {

    	var configuration = extendMediaConfigurationWithProgram();

      wh.presetBuild(true, {
        firebase: configuration.firebase,
        server: configuration.server,
        npm: configuration.npm,
        node: configuration.node,
        grunt: configuration.grunt,
        token: configuration.token,
        email: configuration.email,
        toFile: null  // use the default
      } )

    } )

  program.command( 'backup <toFile>' )
    .description( 'Generates a backup JSON file at the <toFile> from a webhook directory which includes data' )
    .action( function ( toFile ) {

    	var configuration = extendMediaConfigurationWithProgram();

      wh.presetBuild(true, {
        firebase: configuration.firebase,
        server: configuration.server,
        npm: configuration.npm,
        node: configuration.node,
        grunt: configuration.grunt,
        token: configuration.token,
        email: configuration.email,
        toFile: toFile
      } )

    } )

  program.command( 'restore <fromFile>' )
    .description('Restores database to state captured in backup file, such as one generated from `wh backup`')
    .action(function (fromFile) {

    	var configuration = extendMediaConfigurationWithProgram();

      wh.restore(true, {
        firebase: configuration.firebase,
        server: configuration.server,
        npm: configuration.npm,
        node: configuration.node,
        grunt: configuration.grunt,
        token: configuration.token,
        email: configuration.email,
        fromFile: fromFile
      } )

    } )

  program.command('update')
    .description('Updates a webhook site with the latest generate code')
    .action(function () {

    	var configuration = extendMediaConfigurationWithProgram();

      wh.update({
        firebase: configuration.firebase,
        server: configuration.server,
        embedly: configuration.embedly,
        npm: configuration.npm,
        node: configuration.node,
        grunt: configuration.grunt,
        token: configuration.token,
        email: configuration.email,
        force: configuration.force,
        cache: configuration.cache
      });
    });

  program.command('push')
    .description('Push webhook directory to server')
    .action(function () {

    	var configuration = extendMediaConfigurationWithProgram();

      wh.push({
        firebase: configuration.firebase,
        server: configuration.server,
        npm: configuration.npm,
        node: configuration.node,
        grunt: configuration.grunt,
        token: configuration.token,
        email: configuration.email
      });
    });

  program.command('reset-keys')
  	.description('Resets user passwords and site keys.')
  	.action(function () {

  		var configuration = extendMediaConfigurationWithProgram();

  		wh.resetKeys({
  			firebaseName: configuration.firebase,
  			firebaseToken: configuration.token,
  		})
  	})

  program.command('reset-keys:sites')
  	.description('Resets site keys.')
  	.action(function () {

  		var configuration = extendMediaConfigurationWithProgram();

  		wh.resetKeys({
  			firebaseName: configuration.firebase,
  			firebaseToken: configuration.token,
  			resetUserPasswords: false,
  		})
  	})

 	program.command('reset-keys:users')
  	.description('Resets site keys.')
  	.action(function () {

  		var configuration = extendMediaConfigurationWithProgram();

  		wh.resetKeys({
  			firebaseName: configuration.firebase,
  			firebaseToken: configuration.token,
  			resetSiteKeys: false,
  		})
  	})

  program.command('serve [port]')
    .description('Serves a webhook site locally')
    .action(function (port) {

    	var configuration = extendMediaConfigurationWithProgram();

      wh.serve({
        port: port || null,
        firebase: configuration.firebase,
        server: configuration.server,
        npm: configuration.npm,
        node: configuration.node,
        grunt: configuration.grunt,
        token: configuration.token,
        email: configuration.email,
        cache: configuration.cache
      });
    });

  program.command('echo-options')
    .description('Echos options passed into this command, used for debugging')
    .action(function() {
    	
    	var configuration = extendMediaConfigurationWithProgram();

      console.log(configuration.firebase);
      console.log(configuration.server);
      console.log(configuration.embedly);
      console.log(configuration.generate);
      console.log(configuration.imgix_host);
      console.log(configuration.imgix_secret);
      console.log(configuration.npm);
      console.log(configuration.node);
      console.log(configuration.grunt);
      console.log(configuration.token);
      console.log(configuration.email);
    });

	program.parse( process.argv )

	if (!program.args.length) program.help();
} )


/**
 * @param  {string?}   confPath The path to find configuration
 * @param  {Function}  callback Continuation with signature ( error, configuration )
 * @return {undefined}
 */
function getMediaConfiguration ( confPath, callback ) {
	var fs = require('fs');

	if ( typeof confPath === 'function' ) callback = confPath
	if ( typeof callback !== 'function' ) callback = function noop () {}

  function getUserHome() {
    return process.env[
        (process.platform == 'win32')
        	? 'USERPROFILE'
        	: 'HOME'
      ];
  }

  var defaultConfPath = getUserHome() + '/.risdmedia/wh.json';
  var configurationPath = typeof confPath === 'string'
  	? confPath
  	: defaultConfPath;

  try {
    var configuration = JSON.parse(
      fs.readFileSync(configurationPath)
        .toString());
    configuration.http = true;  // default to http until server is available behind TLS
  } catch ( error ) {
  	error.message = 'Pass in a valid configuration path, or use the default at ' + defaultConfPath;
    return callback( error )
  }

  var required = ['embedly', 'firebase', 'server', 'generate',
                  'imgix_host', 'imgix_secret'];
  var missing = required.filter( function ( key ) { return configuration.hasOwnProperty( key ) === false } )

  if ( missing.length > 0 ) {
  	var errorMessage = [
  		'Expected the following configuration values from ' + configurationPath + ':'
		].concat( missing.map( function ( missingKey ) { return '\t' + missingKey + '\n' } ) );

  	return callback( new Error( errorMessage ) )
  }
  
  return callback( null, configuration )
}
